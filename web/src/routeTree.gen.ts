/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated/route'
import { Route as AuthenticatedIndexImport } from './routes/_authenticated/index'
import { Route as authSignInImport } from './routes/(auth)/sign-in'
import { Route as auth500Import } from './routes/(auth)/500'

// Create Virtual Routes

const errors503LazyImport = createFileRoute('/(errors)/503')()
const errors500LazyImport = createFileRoute('/(errors)/500')()
const errors404LazyImport = createFileRoute('/(errors)/404')()
const errors403LazyImport = createFileRoute('/(errors)/403')()
const errors401LazyImport = createFileRoute('/(errors)/401')()
const AuthenticatedSettingsRouteLazyImport = createFileRoute(
  '/_authenticated/settings',
)()
const AuthenticatedTemplatesIndexLazyImport = createFileRoute(
  '/_authenticated/templates/',
)()
const AuthenticatedTasksIndexLazyImport = createFileRoute(
  '/_authenticated/tasks/',
)()
const AuthenticatedSettingsIndexLazyImport = createFileRoute(
  '/_authenticated/settings/',
)()
const AuthenticatedOauth2IndexLazyImport = createFileRoute(
  '/_authenticated/oauth2/',
)()
const AuthenticatedOauth2ResultIndexLazyImport = createFileRoute(
  '/_authenticated/oauth2-result/',
)()
const AuthenticatedMtaIndexLazyImport = createFileRoute(
  '/_authenticated/mta/',
)()
const AuthenticatedMailboxesIndexLazyImport = createFileRoute(
  '/_authenticated/mailboxes/',
)()
const AuthenticatedEventHooksIndexLazyImport = createFileRoute(
  '/_authenticated/event-hooks/',
)()
const AuthenticatedApiDocsIndexLazyImport = createFileRoute(
  '/_authenticated/api-docs/',
)()
const AuthenticatedAccountsIndexLazyImport = createFileRoute(
  '/_authenticated/accounts/',
)()
const AuthenticatedAccessTokensIndexLazyImport = createFileRoute(
  '/_authenticated/access-tokens/',
)()
const AuthenticatedSettingsRootLazyImport = createFileRoute(
  '/_authenticated/settings/root',
)()
const AuthenticatedSettingsProxyLazyImport = createFileRoute(
  '/_authenticated/settings/proxy',
)()
const AuthenticatedSettingsLicenseLazyImport = createFileRoute(
  '/_authenticated/settings/license',
)()

// Create/Update Routes

const AuthenticatedRouteRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedIndexRoute = AuthenticatedIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any)

const errors503LazyRoute = errors503LazyImport
  .update({
    id: '/(errors)/503',
    path: '/503',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() => import('./routes/(errors)/503.lazy').then((d) => d.Route))

const errors500LazyRoute = errors500LazyImport
  .update({
    id: '/(errors)/500',
    path: '/500',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() => import('./routes/(errors)/500.lazy').then((d) => d.Route))

const errors404LazyRoute = errors404LazyImport
  .update({
    id: '/(errors)/404',
    path: '/404',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() => import('./routes/(errors)/404.lazy').then((d) => d.Route))

const errors403LazyRoute = errors403LazyImport
  .update({
    id: '/(errors)/403',
    path: '/403',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() => import('./routes/(errors)/403.lazy').then((d) => d.Route))

const errors401LazyRoute = errors401LazyImport
  .update({
    id: '/(errors)/401',
    path: '/401',
    getParentRoute: () => rootRoute,
  } as any)
  .lazy(() => import('./routes/(errors)/401.lazy').then((d) => d.Route))

const AuthenticatedSettingsRouteLazyRoute =
  AuthenticatedSettingsRouteLazyImport.update({
    id: '/settings',
    path: '/settings',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/settings/route.lazy').then((d) => d.Route),
  )

const authSignInRoute = authSignInImport.update({
  id: '/(auth)/sign-in',
  path: '/sign-in',
  getParentRoute: () => rootRoute,
} as any)

const auth500Route = auth500Import.update({
  id: '/(auth)/500',
  path: '/500',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedTemplatesIndexLazyRoute =
  AuthenticatedTemplatesIndexLazyImport.update({
    id: '/templates/',
    path: '/templates/',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/templates/index.lazy').then((d) => d.Route),
  )

const AuthenticatedTasksIndexLazyRoute =
  AuthenticatedTasksIndexLazyImport.update({
    id: '/tasks/',
    path: '/tasks/',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/tasks/index.lazy').then((d) => d.Route),
  )

const AuthenticatedSettingsIndexLazyRoute =
  AuthenticatedSettingsIndexLazyImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => AuthenticatedSettingsRouteLazyRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/settings/index.lazy').then((d) => d.Route),
  )

const AuthenticatedOauth2IndexLazyRoute =
  AuthenticatedOauth2IndexLazyImport.update({
    id: '/oauth2/',
    path: '/oauth2/',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/oauth2/index.lazy').then((d) => d.Route),
  )

const AuthenticatedOauth2ResultIndexLazyRoute =
  AuthenticatedOauth2ResultIndexLazyImport.update({
    id: '/oauth2-result/',
    path: '/oauth2-result/',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/oauth2-result/index.lazy').then(
      (d) => d.Route,
    ),
  )

const AuthenticatedMtaIndexLazyRoute = AuthenticatedMtaIndexLazyImport.update({
  id: '/mta/',
  path: '/mta/',
  getParentRoute: () => AuthenticatedRouteRoute,
} as any).lazy(() =>
  import('./routes/_authenticated/mta/index.lazy').then((d) => d.Route),
)

const AuthenticatedMailboxesIndexLazyRoute =
  AuthenticatedMailboxesIndexLazyImport.update({
    id: '/mailboxes/',
    path: '/mailboxes/',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/mailboxes/index.lazy').then((d) => d.Route),
  )

const AuthenticatedEventHooksIndexLazyRoute =
  AuthenticatedEventHooksIndexLazyImport.update({
    id: '/event-hooks/',
    path: '/event-hooks/',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/event-hooks/index.lazy').then(
      (d) => d.Route,
    ),
  )

const AuthenticatedApiDocsIndexLazyRoute =
  AuthenticatedApiDocsIndexLazyImport.update({
    id: '/api-docs/',
    path: '/api-docs/',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/api-docs/index.lazy').then((d) => d.Route),
  )

const AuthenticatedAccountsIndexLazyRoute =
  AuthenticatedAccountsIndexLazyImport.update({
    id: '/accounts/',
    path: '/accounts/',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/accounts/index.lazy').then((d) => d.Route),
  )

const AuthenticatedAccessTokensIndexLazyRoute =
  AuthenticatedAccessTokensIndexLazyImport.update({
    id: '/access-tokens/',
    path: '/access-tokens/',
    getParentRoute: () => AuthenticatedRouteRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/access-tokens/index.lazy').then(
      (d) => d.Route,
    ),
  )

const AuthenticatedSettingsRootLazyRoute =
  AuthenticatedSettingsRootLazyImport.update({
    id: '/root',
    path: '/root',
    getParentRoute: () => AuthenticatedSettingsRouteLazyRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/settings/root.lazy').then((d) => d.Route),
  )

const AuthenticatedSettingsProxyLazyRoute =
  AuthenticatedSettingsProxyLazyImport.update({
    id: '/proxy',
    path: '/proxy',
    getParentRoute: () => AuthenticatedSettingsRouteLazyRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/settings/proxy.lazy').then((d) => d.Route),
  )

const AuthenticatedSettingsLicenseLazyRoute =
  AuthenticatedSettingsLicenseLazyImport.update({
    id: '/license',
    path: '/license',
    getParentRoute: () => AuthenticatedSettingsRouteLazyRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/settings/license.lazy').then(
      (d) => d.Route,
    ),
  )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/500': {
      id: '/(auth)/500'
      path: '/500'
      fullPath: '/500'
      preLoaderRoute: typeof auth500Import
      parentRoute: typeof rootRoute
    }
    '/(auth)/sign-in': {
      id: '/(auth)/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof authSignInImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/settings': {
      id: '/_authenticated/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof AuthenticatedSettingsRouteLazyImport
      parentRoute: typeof AuthenticatedRouteImport
    }
    '/(errors)/401': {
      id: '/(errors)/401'
      path: '/401'
      fullPath: '/401'
      preLoaderRoute: typeof errors401LazyImport
      parentRoute: typeof rootRoute
    }
    '/(errors)/403': {
      id: '/(errors)/403'
      path: '/403'
      fullPath: '/403'
      preLoaderRoute: typeof errors403LazyImport
      parentRoute: typeof rootRoute
    }
    '/(errors)/404': {
      id: '/(errors)/404'
      path: '/404'
      fullPath: '/404'
      preLoaderRoute: typeof errors404LazyImport
      parentRoute: typeof rootRoute
    }
    '/(errors)/500': {
      id: '/(errors)/500'
      path: '/500'
      fullPath: '/500'
      preLoaderRoute: typeof errors500LazyImport
      parentRoute: typeof rootRoute
    }
    '/(errors)/503': {
      id: '/(errors)/503'
      path: '/503'
      fullPath: '/503'
      preLoaderRoute: typeof errors503LazyImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/': {
      id: '/_authenticated/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthenticatedIndexImport
      parentRoute: typeof AuthenticatedRouteImport
    }
    '/_authenticated/settings/license': {
      id: '/_authenticated/settings/license'
      path: '/license'
      fullPath: '/settings/license'
      preLoaderRoute: typeof AuthenticatedSettingsLicenseLazyImport
      parentRoute: typeof AuthenticatedSettingsRouteLazyImport
    }
    '/_authenticated/settings/proxy': {
      id: '/_authenticated/settings/proxy'
      path: '/proxy'
      fullPath: '/settings/proxy'
      preLoaderRoute: typeof AuthenticatedSettingsProxyLazyImport
      parentRoute: typeof AuthenticatedSettingsRouteLazyImport
    }
    '/_authenticated/settings/root': {
      id: '/_authenticated/settings/root'
      path: '/root'
      fullPath: '/settings/root'
      preLoaderRoute: typeof AuthenticatedSettingsRootLazyImport
      parentRoute: typeof AuthenticatedSettingsRouteLazyImport
    }
    '/_authenticated/access-tokens/': {
      id: '/_authenticated/access-tokens/'
      path: '/access-tokens'
      fullPath: '/access-tokens'
      preLoaderRoute: typeof AuthenticatedAccessTokensIndexLazyImport
      parentRoute: typeof AuthenticatedRouteImport
    }
    '/_authenticated/accounts/': {
      id: '/_authenticated/accounts/'
      path: '/accounts'
      fullPath: '/accounts'
      preLoaderRoute: typeof AuthenticatedAccountsIndexLazyImport
      parentRoute: typeof AuthenticatedRouteImport
    }
    '/_authenticated/api-docs/': {
      id: '/_authenticated/api-docs/'
      path: '/api-docs'
      fullPath: '/api-docs'
      preLoaderRoute: typeof AuthenticatedApiDocsIndexLazyImport
      parentRoute: typeof AuthenticatedRouteImport
    }
    '/_authenticated/event-hooks/': {
      id: '/_authenticated/event-hooks/'
      path: '/event-hooks'
      fullPath: '/event-hooks'
      preLoaderRoute: typeof AuthenticatedEventHooksIndexLazyImport
      parentRoute: typeof AuthenticatedRouteImport
    }
    '/_authenticated/mailboxes/': {
      id: '/_authenticated/mailboxes/'
      path: '/mailboxes'
      fullPath: '/mailboxes'
      preLoaderRoute: typeof AuthenticatedMailboxesIndexLazyImport
      parentRoute: typeof AuthenticatedRouteImport
    }
    '/_authenticated/mta/': {
      id: '/_authenticated/mta/'
      path: '/mta'
      fullPath: '/mta'
      preLoaderRoute: typeof AuthenticatedMtaIndexLazyImport
      parentRoute: typeof AuthenticatedRouteImport
    }
    '/_authenticated/oauth2-result/': {
      id: '/_authenticated/oauth2-result/'
      path: '/oauth2-result'
      fullPath: '/oauth2-result'
      preLoaderRoute: typeof AuthenticatedOauth2ResultIndexLazyImport
      parentRoute: typeof AuthenticatedRouteImport
    }
    '/_authenticated/oauth2/': {
      id: '/_authenticated/oauth2/'
      path: '/oauth2'
      fullPath: '/oauth2'
      preLoaderRoute: typeof AuthenticatedOauth2IndexLazyImport
      parentRoute: typeof AuthenticatedRouteImport
    }
    '/_authenticated/settings/': {
      id: '/_authenticated/settings/'
      path: '/'
      fullPath: '/settings/'
      preLoaderRoute: typeof AuthenticatedSettingsIndexLazyImport
      parentRoute: typeof AuthenticatedSettingsRouteLazyImport
    }
    '/_authenticated/tasks/': {
      id: '/_authenticated/tasks/'
      path: '/tasks'
      fullPath: '/tasks'
      preLoaderRoute: typeof AuthenticatedTasksIndexLazyImport
      parentRoute: typeof AuthenticatedRouteImport
    }
    '/_authenticated/templates/': {
      id: '/_authenticated/templates/'
      path: '/templates'
      fullPath: '/templates'
      preLoaderRoute: typeof AuthenticatedTemplatesIndexLazyImport
      parentRoute: typeof AuthenticatedRouteImport
    }
  }
}

// Create and export the route tree

interface AuthenticatedSettingsRouteLazyRouteChildren {
  AuthenticatedSettingsLicenseLazyRoute: typeof AuthenticatedSettingsLicenseLazyRoute
  AuthenticatedSettingsProxyLazyRoute: typeof AuthenticatedSettingsProxyLazyRoute
  AuthenticatedSettingsRootLazyRoute: typeof AuthenticatedSettingsRootLazyRoute
  AuthenticatedSettingsIndexLazyRoute: typeof AuthenticatedSettingsIndexLazyRoute
}

const AuthenticatedSettingsRouteLazyRouteChildren: AuthenticatedSettingsRouteLazyRouteChildren =
  {
    AuthenticatedSettingsLicenseLazyRoute:
      AuthenticatedSettingsLicenseLazyRoute,
    AuthenticatedSettingsProxyLazyRoute: AuthenticatedSettingsProxyLazyRoute,
    AuthenticatedSettingsRootLazyRoute: AuthenticatedSettingsRootLazyRoute,
    AuthenticatedSettingsIndexLazyRoute: AuthenticatedSettingsIndexLazyRoute,
  }

const AuthenticatedSettingsRouteLazyRouteWithChildren =
  AuthenticatedSettingsRouteLazyRoute._addFileChildren(
    AuthenticatedSettingsRouteLazyRouteChildren,
  )

interface AuthenticatedRouteRouteChildren {
  AuthenticatedSettingsRouteLazyRoute: typeof AuthenticatedSettingsRouteLazyRouteWithChildren
  AuthenticatedIndexRoute: typeof AuthenticatedIndexRoute
  AuthenticatedAccessTokensIndexLazyRoute: typeof AuthenticatedAccessTokensIndexLazyRoute
  AuthenticatedAccountsIndexLazyRoute: typeof AuthenticatedAccountsIndexLazyRoute
  AuthenticatedApiDocsIndexLazyRoute: typeof AuthenticatedApiDocsIndexLazyRoute
  AuthenticatedEventHooksIndexLazyRoute: typeof AuthenticatedEventHooksIndexLazyRoute
  AuthenticatedMailboxesIndexLazyRoute: typeof AuthenticatedMailboxesIndexLazyRoute
  AuthenticatedMtaIndexLazyRoute: typeof AuthenticatedMtaIndexLazyRoute
  AuthenticatedOauth2ResultIndexLazyRoute: typeof AuthenticatedOauth2ResultIndexLazyRoute
  AuthenticatedOauth2IndexLazyRoute: typeof AuthenticatedOauth2IndexLazyRoute
  AuthenticatedTasksIndexLazyRoute: typeof AuthenticatedTasksIndexLazyRoute
  AuthenticatedTemplatesIndexLazyRoute: typeof AuthenticatedTemplatesIndexLazyRoute
}

const AuthenticatedRouteRouteChildren: AuthenticatedRouteRouteChildren = {
  AuthenticatedSettingsRouteLazyRoute:
    AuthenticatedSettingsRouteLazyRouteWithChildren,
  AuthenticatedIndexRoute: AuthenticatedIndexRoute,
  AuthenticatedAccessTokensIndexLazyRoute:
    AuthenticatedAccessTokensIndexLazyRoute,
  AuthenticatedAccountsIndexLazyRoute: AuthenticatedAccountsIndexLazyRoute,
  AuthenticatedApiDocsIndexLazyRoute: AuthenticatedApiDocsIndexLazyRoute,
  AuthenticatedEventHooksIndexLazyRoute: AuthenticatedEventHooksIndexLazyRoute,
  AuthenticatedMailboxesIndexLazyRoute: AuthenticatedMailboxesIndexLazyRoute,
  AuthenticatedMtaIndexLazyRoute: AuthenticatedMtaIndexLazyRoute,
  AuthenticatedOauth2ResultIndexLazyRoute:
    AuthenticatedOauth2ResultIndexLazyRoute,
  AuthenticatedOauth2IndexLazyRoute: AuthenticatedOauth2IndexLazyRoute,
  AuthenticatedTasksIndexLazyRoute: AuthenticatedTasksIndexLazyRoute,
  AuthenticatedTemplatesIndexLazyRoute: AuthenticatedTemplatesIndexLazyRoute,
}

const AuthenticatedRouteRouteWithChildren =
  AuthenticatedRouteRoute._addFileChildren(AuthenticatedRouteRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof AuthenticatedRouteRouteWithChildren
  '/500': typeof errors500LazyRoute
  '/sign-in': typeof authSignInRoute
  '/settings': typeof AuthenticatedSettingsRouteLazyRouteWithChildren
  '/401': typeof errors401LazyRoute
  '/403': typeof errors403LazyRoute
  '/404': typeof errors404LazyRoute
  '/503': typeof errors503LazyRoute
  '/': typeof AuthenticatedIndexRoute
  '/settings/license': typeof AuthenticatedSettingsLicenseLazyRoute
  '/settings/proxy': typeof AuthenticatedSettingsProxyLazyRoute
  '/settings/root': typeof AuthenticatedSettingsRootLazyRoute
  '/access-tokens': typeof AuthenticatedAccessTokensIndexLazyRoute
  '/accounts': typeof AuthenticatedAccountsIndexLazyRoute
  '/api-docs': typeof AuthenticatedApiDocsIndexLazyRoute
  '/event-hooks': typeof AuthenticatedEventHooksIndexLazyRoute
  '/mailboxes': typeof AuthenticatedMailboxesIndexLazyRoute
  '/mta': typeof AuthenticatedMtaIndexLazyRoute
  '/oauth2-result': typeof AuthenticatedOauth2ResultIndexLazyRoute
  '/oauth2': typeof AuthenticatedOauth2IndexLazyRoute
  '/settings/': typeof AuthenticatedSettingsIndexLazyRoute
  '/tasks': typeof AuthenticatedTasksIndexLazyRoute
  '/templates': typeof AuthenticatedTemplatesIndexLazyRoute
}

export interface FileRoutesByTo {
  '/500': typeof errors500LazyRoute
  '/sign-in': typeof authSignInRoute
  '/401': typeof errors401LazyRoute
  '/403': typeof errors403LazyRoute
  '/404': typeof errors404LazyRoute
  '/503': typeof errors503LazyRoute
  '/': typeof AuthenticatedIndexRoute
  '/settings/license': typeof AuthenticatedSettingsLicenseLazyRoute
  '/settings/proxy': typeof AuthenticatedSettingsProxyLazyRoute
  '/settings/root': typeof AuthenticatedSettingsRootLazyRoute
  '/access-tokens': typeof AuthenticatedAccessTokensIndexLazyRoute
  '/accounts': typeof AuthenticatedAccountsIndexLazyRoute
  '/api-docs': typeof AuthenticatedApiDocsIndexLazyRoute
  '/event-hooks': typeof AuthenticatedEventHooksIndexLazyRoute
  '/mailboxes': typeof AuthenticatedMailboxesIndexLazyRoute
  '/mta': typeof AuthenticatedMtaIndexLazyRoute
  '/oauth2-result': typeof AuthenticatedOauth2ResultIndexLazyRoute
  '/oauth2': typeof AuthenticatedOauth2IndexLazyRoute
  '/settings': typeof AuthenticatedSettingsIndexLazyRoute
  '/tasks': typeof AuthenticatedTasksIndexLazyRoute
  '/templates': typeof AuthenticatedTemplatesIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_authenticated': typeof AuthenticatedRouteRouteWithChildren
  '/(auth)/500': typeof auth500Route
  '/(auth)/sign-in': typeof authSignInRoute
  '/_authenticated/settings': typeof AuthenticatedSettingsRouteLazyRouteWithChildren
  '/(errors)/401': typeof errors401LazyRoute
  '/(errors)/403': typeof errors403LazyRoute
  '/(errors)/404': typeof errors404LazyRoute
  '/(errors)/500': typeof errors500LazyRoute
  '/(errors)/503': typeof errors503LazyRoute
  '/_authenticated/': typeof AuthenticatedIndexRoute
  '/_authenticated/settings/license': typeof AuthenticatedSettingsLicenseLazyRoute
  '/_authenticated/settings/proxy': typeof AuthenticatedSettingsProxyLazyRoute
  '/_authenticated/settings/root': typeof AuthenticatedSettingsRootLazyRoute
  '/_authenticated/access-tokens/': typeof AuthenticatedAccessTokensIndexLazyRoute
  '/_authenticated/accounts/': typeof AuthenticatedAccountsIndexLazyRoute
  '/_authenticated/api-docs/': typeof AuthenticatedApiDocsIndexLazyRoute
  '/_authenticated/event-hooks/': typeof AuthenticatedEventHooksIndexLazyRoute
  '/_authenticated/mailboxes/': typeof AuthenticatedMailboxesIndexLazyRoute
  '/_authenticated/mta/': typeof AuthenticatedMtaIndexLazyRoute
  '/_authenticated/oauth2-result/': typeof AuthenticatedOauth2ResultIndexLazyRoute
  '/_authenticated/oauth2/': typeof AuthenticatedOauth2IndexLazyRoute
  '/_authenticated/settings/': typeof AuthenticatedSettingsIndexLazyRoute
  '/_authenticated/tasks/': typeof AuthenticatedTasksIndexLazyRoute
  '/_authenticated/templates/': typeof AuthenticatedTemplatesIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/500'
    | '/sign-in'
    | '/settings'
    | '/401'
    | '/403'
    | '/404'
    | '/503'
    | '/'
    | '/settings/license'
    | '/settings/proxy'
    | '/settings/root'
    | '/access-tokens'
    | '/accounts'
    | '/api-docs'
    | '/event-hooks'
    | '/mailboxes'
    | '/mta'
    | '/oauth2-result'
    | '/oauth2'
    | '/settings/'
    | '/tasks'
    | '/templates'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/500'
    | '/sign-in'
    | '/401'
    | '/403'
    | '/404'
    | '/503'
    | '/'
    | '/settings/license'
    | '/settings/proxy'
    | '/settings/root'
    | '/access-tokens'
    | '/accounts'
    | '/api-docs'
    | '/event-hooks'
    | '/mailboxes'
    | '/mta'
    | '/oauth2-result'
    | '/oauth2'
    | '/settings'
    | '/tasks'
    | '/templates'
  id:
    | '__root__'
    | '/_authenticated'
    | '/(auth)/500'
    | '/(auth)/sign-in'
    | '/_authenticated/settings'
    | '/(errors)/401'
    | '/(errors)/403'
    | '/(errors)/404'
    | '/(errors)/500'
    | '/(errors)/503'
    | '/_authenticated/'
    | '/_authenticated/settings/license'
    | '/_authenticated/settings/proxy'
    | '/_authenticated/settings/root'
    | '/_authenticated/access-tokens/'
    | '/_authenticated/accounts/'
    | '/_authenticated/api-docs/'
    | '/_authenticated/event-hooks/'
    | '/_authenticated/mailboxes/'
    | '/_authenticated/mta/'
    | '/_authenticated/oauth2-result/'
    | '/_authenticated/oauth2/'
    | '/_authenticated/settings/'
    | '/_authenticated/tasks/'
    | '/_authenticated/templates/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthenticatedRouteRoute: typeof AuthenticatedRouteRouteWithChildren
  auth500Route: typeof auth500Route
  authSignInRoute: typeof authSignInRoute
  errors401LazyRoute: typeof errors401LazyRoute
  errors403LazyRoute: typeof errors403LazyRoute
  errors404LazyRoute: typeof errors404LazyRoute
  errors500LazyRoute: typeof errors500LazyRoute
  errors503LazyRoute: typeof errors503LazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  AuthenticatedRouteRoute: AuthenticatedRouteRouteWithChildren,
  auth500Route: auth500Route,
  authSignInRoute: authSignInRoute,
  errors401LazyRoute: errors401LazyRoute,
  errors403LazyRoute: errors403LazyRoute,
  errors404LazyRoute: errors404LazyRoute,
  errors500LazyRoute: errors500LazyRoute,
  errors503LazyRoute: errors503LazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_authenticated",
        "/(auth)/500",
        "/(auth)/sign-in",
        "/(errors)/401",
        "/(errors)/403",
        "/(errors)/404",
        "/(errors)/500",
        "/(errors)/503"
      ]
    },
    "/_authenticated": {
      "filePath": "_authenticated/route.tsx",
      "children": [
        "/_authenticated/settings",
        "/_authenticated/",
        "/_authenticated/access-tokens/",
        "/_authenticated/accounts/",
        "/_authenticated/api-docs/",
        "/_authenticated/event-hooks/",
        "/_authenticated/mailboxes/",
        "/_authenticated/mta/",
        "/_authenticated/oauth2-result/",
        "/_authenticated/oauth2/",
        "/_authenticated/tasks/",
        "/_authenticated/templates/"
      ]
    },
    "/(auth)/500": {
      "filePath": "(auth)/500.tsx"
    },
    "/(auth)/sign-in": {
      "filePath": "(auth)/sign-in.tsx"
    },
    "/_authenticated/settings": {
      "filePath": "_authenticated/settings/route.lazy.tsx",
      "parent": "/_authenticated",
      "children": [
        "/_authenticated/settings/license",
        "/_authenticated/settings/proxy",
        "/_authenticated/settings/root",
        "/_authenticated/settings/"
      ]
    },
    "/(errors)/401": {
      "filePath": "(errors)/401.lazy.tsx"
    },
    "/(errors)/403": {
      "filePath": "(errors)/403.lazy.tsx"
    },
    "/(errors)/404": {
      "filePath": "(errors)/404.lazy.tsx"
    },
    "/(errors)/500": {
      "filePath": "(errors)/500.lazy.tsx"
    },
    "/(errors)/503": {
      "filePath": "(errors)/503.lazy.tsx"
    },
    "/_authenticated/": {
      "filePath": "_authenticated/index.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/settings/license": {
      "filePath": "_authenticated/settings/license.lazy.tsx",
      "parent": "/_authenticated/settings"
    },
    "/_authenticated/settings/proxy": {
      "filePath": "_authenticated/settings/proxy.lazy.tsx",
      "parent": "/_authenticated/settings"
    },
    "/_authenticated/settings/root": {
      "filePath": "_authenticated/settings/root.lazy.tsx",
      "parent": "/_authenticated/settings"
    },
    "/_authenticated/access-tokens/": {
      "filePath": "_authenticated/access-tokens/index.lazy.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/accounts/": {
      "filePath": "_authenticated/accounts/index.lazy.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/api-docs/": {
      "filePath": "_authenticated/api-docs/index.lazy.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/event-hooks/": {
      "filePath": "_authenticated/event-hooks/index.lazy.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/mailboxes/": {
      "filePath": "_authenticated/mailboxes/index.lazy.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/mta/": {
      "filePath": "_authenticated/mta/index.lazy.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/oauth2-result/": {
      "filePath": "_authenticated/oauth2-result/index.lazy.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/oauth2/": {
      "filePath": "_authenticated/oauth2/index.lazy.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/settings/": {
      "filePath": "_authenticated/settings/index.lazy.tsx",
      "parent": "/_authenticated/settings"
    },
    "/_authenticated/tasks/": {
      "filePath": "_authenticated/tasks/index.lazy.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/templates/": {
      "filePath": "_authenticated/templates/index.lazy.tsx",
      "parent": "/_authenticated"
    }
  }
}
ROUTE_MANIFEST_END */
